#! /usr/bin/python

## The sql code generated by this script does the following:
## 1- It creates the <state> table such that TRAN_ID and CMTE_ID are not empty, and only records that have a unique (TRAN_ID, CMTE_ID) pair are kept.
## 2- Joins the above table with contributor_addresses_unique and inserts the results into <state>_addresses 

#from states import *
from disambiguation.core import utils

def template_remove_non_unique(state):
    s = 'delete from %s using %s join  (select TRAN_ID,CMTE_ID,count(*) as c  from %s  group by TRAN_ID,CMTE_ID  having c>1 ) t on (%s.TRAN_ID=t.TRAN_ID and %s.CMTE_ID=t.CMTE_ID);\n' % (state,state,state,state,state)
    return s
    





'''dict_states = {
                "alaska":"AK",
                "delaware":"DE",
                "missouri":"MO",
                "nevada":"NV",
                "newyork":"NY",
                "ohio":"OH",
                "massachussetes":"MA",
                "vermont":"VT"}
'''

def generate_state_full():
    f = open('../create_state_full_tables.sql','w')


    tablename = utils.config.MySQL_table_individual_contributions
    for code,name in utils.states.dict_state.iteritems():
        tablename_full = utils.config.MySQL_table_state_full % name
        query = ("USE FEC;\n"
        "drop table if exists %s;\n"
        "create table %s like %s;\n"
        "insert into %s select * from %s where STATE='%s';\n")%(tablename_full,tablename_full,tablename,tablename_full,tablename, code)

        print query
        f.write(query)
        f.write('\n')

    f.close()






def generate_state_and_state_addresses():
    f = open('../create_state_addresses_tables.sql','w')


    for code, name in utils.states.dict_state.iteritems():
        tablename = utils.config.MySQL_table_individual_contributions
        tablename_addresses = utils.config.MySQL_table_state_addresses % name
        query = ("USE FEC;\n"
        "drop table if exists %s;\n"
        "create table %s like %s;\n"
        "insert into %s select * from %s where STATE='%s';\n")%(name,name,tablename,name,tablename,code)
        query += 'delete from %s where TRAN_ID="" or CMTE_ID="";\n' % name
        query += template_remove_non_unique(name)
        query += ("drop table if exists %s;\n"
        "create table %s (unique key TRAN_INDEX(TRAN_ID,CMTE_ID)) select * from %s as t1  join contributor_addresses_identifiable as t2 using (CMTE_ID,TRAN_ID);\n") % (tablename_addresses, tablename_addresses,name)
        query += "drop table if exists %s;\n" % name

        print query
        f.write(query)
        f.write('\n')

    f.close()




generate_state_full()
generate_state_and_state_addresses()
