'''
This module contains methods used for the second stage of disambiguation.
in this stage, we use combined national hashes and the state-level results
to identify pairs of records that are candidates for comparison but haven't
already been clustered together (will be mostly cross-state pairs). Then,
We divide these records into approximately independent partitions each of
which can be independently analyzed by a child process. This analysis consists
of performing pairwise comparisons for each specified pair and deciding about
whether to merge their corresponding clusters.
In making this decision, cluster level statistics will be used. That is,
information regarding name/employer/occupation/etc. frequencies obtained
from stage1 clusters are used.
'''

from disambiguation.core import utils
from disambiguation.core import hashes
import disambiguation.config as config
from disambiguation.core import Database



def get_candidate_pairs(num_pairs, state='USA', recompute=False):
    '''
    Get pairs of record ids that are similar according
    to the national (combined) hashes, but aren't already
    linked at the state level.
    @param state: the state whose hashes will be used.
    @param num_pairs: number of new records to select for comparison
    @return: list of tuples of record ids.
    '''

    # file that either already contains, or will contain a set of candidate
    # pairs of record ids together with a "weight"
    candidate_pairs_file = config.candidate_pairs_file_template % state

    # Make sure the file already exists
    if not recompute:
        if utils.os.path.exists(candidate_pairs_file):
            print "Candidate pairs file already exists. Skipping."
            return

    # Number of adjacent hashes to log
    B = 3

    # number of times to shuffle the list of hashes.
    num_shuffles = 40

    # list of candidate pairs to be compared.
    list_pairs = []

    # Get the full sorted edgelist from national hashes.
    filename = config.hashes_file_template % (state, 'Tokenizer')

    print "Starting get_edgelist_from_hashes_file()..."
    edgelist = hashes.get_edgelist_from_hashes_file(filename, state, B, num_shuffles, num_procs=3, num_pairs=num_pairs)
    # edgelist.reverse()
    print "Done with get_edgelist_from_hashes_file()"
    print "Done fetching new pairs."

    # Export edgelist to file
    with open(candidate_pairs_file,'w') as f:
        for edge in edgelist:
            f.write("%d %d %d\n" % (edge[0], edge[1], edge[2]))

        




def partition_records(num_pairs, num_partitions, state = "USA"):
    '''
    Partition the set of records appearing in the pairs identified
    by get_candidate_pairs into num_partitions subsets
    with minimal inter-set links, and export the edgelists within
    each sibset to a separate file for each subset. The list of record
    pairs is read from a file generated by get_candidate_pairs().
    
    @param num_partitions: number of partitions to divide list_record_pairs into.
    @status: only works if the giant component isn't "too" large. 
    '''
    
    
    # file that either already contains, or will contain a set of candidate
    # pairs of record ids together with a "weight"
    candidate_pairs_file = config.candidate_pairs_file_template % state
    

    ig = utils.igraph
    with open(candidate_pairs_file) as f:
        g = ig.Graph.Read_Ncol(f, names=True, weights="if_present", directed=False)
#         print g.vcount(), g.ecount()
    
  
    
    list_components = g.components().subgraphs()
    
    # partition the list of all connected components into a list of 
    # num_partition subsets such that the total number of nodes in each
    # partition is roughly constant.
    list_of_partitions = utils.partition_list_of_graphs(list_components, num_partitions)
    
    
    # Export the edgelist for each partition to a separate file.
    list_of_list_edges = [ [(g.vs[e.source]['name'], g.vs[e.target]['name'], str(int(e['weight']))) for g in partition for e in g.es] for partition in list_of_partitions]
    for counter,partition in enumerate(list_of_list_edges):
        with open(config.candidate_pairs_partitioned_file_template %(state, counter),'w') as f:
            for edge in partition:
                f.write("%s %s %s\n" % edge)
        
            

def disambiguate_subsets_multiproc(list_filenames, num_procs):
    '''
    Compare record pairs within each subset and save results.
    @param list_filenames: list of filenames exported by partition_records()
    '''
    
    for pid in range(num_procs):
        p = utils.multiprocessing.Process(target=worker_get_edgelist_from_hashes_file
                                    , args=(data[pid],))
        p.start()
        print "process %d started..." % pid
        list_procs.append(p)
    for counter,partition in enumerate(list_of_list_edges):
        with open(config.candidate_pairs_partitioned_file_template %(state, counter),'w') as f:
            for edge in partition:
                f.write("%s %s %s\n" % edge)
                
    pass









